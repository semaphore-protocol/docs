"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[9600],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>d});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=r.createContext({}),l=function(e){var t=r.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(o),u=n,d=m["".concat(i,".").concat(u)]||m[u]||h[u]||a;return o?r.createElement(d,c(c({ref:t},p),{},{components:o})):r.createElement(d,c({ref:t},p))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:n,c[1]=s;for(var l=2;l<a;l++)c[l]=o[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},6520:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=o(7462),n=(o(7294),o(3905));const a={sidebar_position:3},c="Contracts",s={unversionedId:"technical-reference/contracts",id:"version-V3/technical-reference/contracts",title:"Contracts",description:"Semaphore includes two types of contracts:",source:"@site/versioned_docs/version-V3/technical-reference/contracts.md",sourceDirName:"technical-reference",slug:"/technical-reference/contracts",permalink:"/docs/technical-reference/contracts",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V3/technical-reference/contracts.md",tags:[],version:"V3",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"version-V3/mySidebar",previous:{title:"Circuits",permalink:"/docs/technical-reference/circuits"},next:{title:"Deployed contracts",permalink:"/docs/deployed-contracts"}},i={},l=[{value:"Base contracts",id:"base-contracts",level:2},{value:"Extension contracts",id:"extension-contracts",level:2},{value:"Semaphore.sol",id:"semaphoresol",level:2}],p={toc:l},m="wrapper";function h(e){let{components:t,...o}=e;return(0,n.kt)(m,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"contracts"},"Contracts"),(0,n.kt)("p",null,"Semaphore includes two types of contracts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/contracts#base-contracts"},(0,n.kt)("strong",{parentName:"a"},"Base contracts"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/contracts#extension-contracts"},(0,n.kt)("strong",{parentName:"a"},"Extension contracts")))),(0,n.kt)("p",null,"And ",(0,n.kt)("a",{parentName:"p",href:"/docs/technical-reference/contracts#semaphoresol"},(0,n.kt)("strong",{parentName:"a"},"Semaphore.sol")),", the main contract deployed on the networks supported by Semaphore."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"To use Semaphore contracts and interfaces in your project,\ninstall the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/main/packages/contracts"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts"))," NPM package.")),(0,n.kt)("h2",{id:"base-contracts"},"Base contracts"),(0,n.kt)("p",null,"Semaphore provides the following base contracts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/base/SemaphoreVerifier.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreVerifier.sol")),": contains a function to verify Semaphore proofs;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/base/SemaphoreGroups.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreGroups.sol")),": contains the functions to create groups and add/remove/update members.")),(0,n.kt)("p",null,"These contracts are closely related to the protocol.\nYou can use them in your contract or you can use ",(0,n.kt)("a",{parentName:"p",href:"/docs/technical-reference/contracts#semaphoresol"},(0,n.kt)("strong",{parentName:"a"},"Semaphore.sol")),", which integrates them for you."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"While some DApps may use on-chain groups, others may prefer to use off-chain groups, saving only their tree roots in the contract.")),(0,n.kt)("h2",{id:"extension-contracts"},"Extension contracts"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/extensions/SemaphoreVoting.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreVoting.sol")),": voting contract that contains the essential functions to create polls, add voters, and anonymously cast votes;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/extensions/SemaphoreWhistleblowing.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreWhistleblowing.sol")),": whistleblowing contract that contains the essential functions to create entities (for example: non-profit organizations), add whistleblowers, and anonymously publish leaks.")),(0,n.kt)("p",null,"These contracts extend the protocol to provide application logic for specific use-cases.\nMore extensions will be added in the future."),(0,n.kt)("h2",{id:"semaphoresol"},"Semaphore.sol"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/blob/main/packages/contracts/contracts/Semaphore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," is based on the base contracts. It integrates them and additionally provides:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a system to allow only admins (i.e. Ethereum accounts or smart contracts) to manage groups;"),(0,n.kt)("li",{parentName:"ul"},"a mechanism to save the ",(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/circuits#nullifier-hash"},"nullifier hashes")," of each group and prevent double-signaling;"),(0,n.kt)("li",{parentName:"ul"},"a mechanism to allow Semaphore proofs generated with old Merkle roots to be verified for a certain period of time defined by the group admin.")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"See our ",(0,n.kt)("a",{parentName:"p",href:"/docs/deployed-contracts"},"deployed contracts")," to find the addresses for your network.")))}h.isMDXComponent=!0}}]);